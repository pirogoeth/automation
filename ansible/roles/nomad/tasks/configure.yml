---

- set_fact:
    _nomad_config: "{{ nomad_config_initial|combine(nomad_config, recursive=true) }}"
    _servers_list: "{{ server_hosts | difference(inventory_hostname) | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '$', ':4647') }}"

- include_tasks: ./tls/main.yml
  when: _nomad_tls_enabled
  vars:
    _nomad_tls_enabled: "{{ nomad_config.get('tls', {}).get('http') == true or nomad_config.get('tls', {}).get('rpc') == true }}"

- include_tasks: ./gossip/main.yml

- name: Set bootstrap-node-only configs
  set_fact:
    _nomad_config: |
      {{ _nomad_config | combine({
        "server": {
          "enabled": true,
          "bootstrap_expect": nomad_bootstrap_expect,
        },
      }, recursive=true) }}
  when: is_bootstrap_host

- name: Set non-bootstrap server configs
  set_fact:
    _nomad_config: |
      {{ _nomad_config | combine({
        "client": {
          "enabled": false,
        },
        "server": {
          "enabled": true,
          "server_join": {
            "retry_join": [hostvars[bootstrap_host]['ansible_default_ipv4']['address']],
            "retry_max": 0,
            "retry_interval": "15s",
          },
        },
      }, recursive=true) }}
  when: is_server_host

- name: Set client configs
  set_fact:
    _nomad_config: |
      {{ _nomad_config | combine({
        "server": {
          "enabled": false,
        },
        "client": {
          "enabled": true,
          "node_pool": hostvars[inventory_hostname]['attributes']['nomad_node_pool'],
          "server_join": [{
            "retry_join": _servers_list,
            "retry_max": 15,
            "retry_interval": "15s",
          }],
        },
      }, recursive=true) }}
  when: is_client_host

- name: Create Nomad systemd service
  template:
    src: nomad.service.j2
    dest: /etc/systemd/system/nomad.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Enable nomad service

- when:
  - nomad_docker_auth_file|default(none) is not none
  - is_client_host
  block:
  - name: Write Nomad docker auths file
    copy:
      content: "{{ nomad_docker_auth_file }}"
      dest: /opt/nomad/config/docker_auth.json
      owner: nomad
      group: nomad
      mode: 0600
    notify:
      - Restart nomad

  - name: Set Docker auths file path in Nomad config
    set_fact:
      _nomad_config: |
        {% set _auth_config = {"docker": {"config": {"auth": {"config": "/opt/nomad/config/docker_auth.json"}}}} %}
        {% set _docker_plugin = _nomad_config.plugin | select("dict_contains", "docker") | first | combine(_auth_config, recursive=true) %}
        {% set _other_plugins = _nomad_config.plugin | reject("dict_contains", "docker") %}
        {{ _nomad_config | combine({
          "plugin": [_docker_plugin] + _other_plugins,
        }, recursive=true, list_merge="replace") }}

- name: Reconfigure Nomad
  throttle: 1
  block:
  - name: Write Nomad config
    copy:
      content: "{{ _nomad_config | to_nice_json }}"
      dest: /etc/nomad/conf.d/nomad.json
      owner: nomad
      group: nomad
      mode: 0644
    notify:
      - Restart nomad
      - Reload nomad

  - name: Wait for Nomad to be running
    wait_for:
      port: 4646
      timeout: 120
    register: nomad_running

  - name: Fail play if Nomad is not running/listening
    fail:
      msg: Nomad is not up and listening by end of timeout, manual intervention required! 
    when: nomad_running is failed

- name: Ensure Nomad service started
  service:
    name: nomad
    state: started
    enabled: true
