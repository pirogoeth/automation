---
# Using docker_container, provision the following:
# - postgresql
#   - this has a SQL script to set up permissions for the k3s user.
# - pgadmin4
# - nginx-proxy-manager
#   - this has a series of nginx config snippets that set up streams between nginx and the k3s servers.
# - ???
#
# there are a bunch of secrets that are generated by terraform and stored in that state.
# these need to be exposed in the top-level module outputs.
#
# how does docker_container handle restarting across reboots?
# should this node include portainer(-agent)?

- name: Make all directories
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
  loop:
  - /opt/k3s-postgres/data
  - /opt/k3s-postgres/init
  - /opt/k3s-postgres-admin/conf
  - /opt/k3s-postgres-admin/data
  - /opt/k3s-npm/custom
  - /opt/k3s-nginx/cache
  - /opt/k3s-nginx/conf.d
  - /opt/k3s-nginx/conf.d/http
  - /opt/k3s-nginx/conf.d/stream

- name: Create empty files for pgadmin4
  copy:
    content: ""
    dest: "{{ item.path }}"
    owner: "{{ item.owner|default('root') }}"
    group: "{{ item.group|default('root') }}"
  loop:
  - path: /opt/k3s-postgres-admin/conf/config_local.py
    owner: 5050
    group: 5050
  - path: /opt/k3s-postgres-admin/conf/servers.json
    owner: 5050
    group: 5050

- name: Write postgres initializer scripts
  template:
    src: "{{ item.src }}"
    dest: "/opt/k3s-postgres/init/{{ item.dest }}"
    mode: 0755
  loop:
    - src: postgres/01_create_k3s.sql.j2
      dest: 01_create_k3s.sql

- name: Create postgres container
  community.docker.docker_container:
    name: k3s-postgres
    image: "postgres:{{ postgres_version }}"
    restart_policy: always
    ports:
    - "0.0.0.0:5432:5432"
    env:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: "{{ postgres_root_password }}"
    volumes:
    - /opt/k3s-postgres/data:/var/lib/postgresql/data
    - /opt/k3s-postgres/init:/docker-entrypoint-initdb.d:ro

- name: Create pgadmin4 container
  community.docker.docker_container:
    pull: true
    name: k3s-postgres-admin
    image: "{{ pgadmin_image }}:{{ pgadmin_version }}"
    restart_policy: always
    ports:
    - "127.0.0.1:5050:5050"
    env:
      PGADMIN_DEFAULT_EMAIL: "{{ pgadmin_default_email }}"
      PGADMIN_DEFAULT_PASSWORD: "{{ pgadmin_default_password }}"
      PGADMIN_LISTEN_PORT: "5050"
    links:
    - k3s-postgres:postgres
    volumes:
    - /opt/k3s-postgres-admin/conf/config_local.py:/pgadmin4/config_local.py
    - /opt/k3s-postgres-admin/conf/servers.json:/pgadmin4/servers.json
    - /opt/k3s-postgres-admin/data:/var/lib/pgadmin

- name: Write nginx http config templates
  template:
    src: "nginx/http/{{ item.src }}"
    dest: "/opt/k3s-nginx/conf.d/http/{{ item.dest }}"
    mode: 0644
  notify:
  - Restart nginx
  loop: []

- name: Write nginx stream config templates
  template:
    src: "nginx/stream/{{ item.src }}"
    dest: "/opt/k3s-nginx/conf.d/stream/{{ item.dest }}"
    mode: 0644
  notify:
  - Restart nginx
  loop:
  - src: k8s.conf.j2
    dest: k8s.conf

- name: Write nginx config
  template:
    src: "nginx/nginx.conf.j2"
    dest: "/opt/k3s-nginx/nginx.conf"
    mode: 0644
  notify:
  - Restart nginx

- name: Create nginx container
  community.docker.docker_container:
    name: k3s-nginx
    image: "nginx:{{ nginx_version }}"
    pull: true
    restart_policy: always
    ports:
    - "0.0.0.0:80:80"
    - "0.0.0.0:443:443"
    - "0.0.0.0:6443:6443"
    volumes:
    - /opt/k3s-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    - /opt/k3s-nginx/conf.d:/etc/nginx/conf.d:ro
    - /opt/k3s-nginx/cache:/var/cache/nginx