---
# Using docker_container, provision the following:
# - postgresql
#   - this has a SQL script to set up permissions for the k3s user.
# - pgadmin4
# - nginx-proxy-manager
#   - this has a series of nginx config snippets that set up streams between nginx and the k3s servers.
# - ???
#
# there are a bunch of secrets that are generated by terraform and stored in that state.
# these need to be exposed in the top-level module outputs.
#
# how does docker_container handle restarting across reboots?
# should this node include portainer(-agent)?

- name: Make all directories
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
  loop:
  - /opt/k3s-postgres/data
  - /opt/k3s-postgres/init
  - /opt/k3s-postgres-admin/conf
  - /opt/k3s-postgres-admin/data
  - /opt/k3s-npm/custom

- name: Create empty files
  copy:
    content: ""
    dest: "{{ item.path }}"
    owner: "{{ item.owner|default('root') }}"
    group: "{{ item.group|default('root') }}"
  loop:
  - path: /opt/k3s-postgres-admin/conf/config_local.py
    owner: 5050
    group: 5050
  - path: /opt/k3s-postgres-admin/conf/servers.json
    owner: 5050
    group: 5050

- name: Write postgres initializer scripts
  template:
    src: "{{ item.src }}"
    dest: "/opt/k3s-postgres/init/{{ item.dest }}"
    mode: 0755
  loop:
    - src: postgres/01_create_k3s.sql.j2
      dest: 01_create_k3s.sql

- name: Set up postgres container
  community.docker.docker_container:
    name: k3s-postgres
    image: "postgres:{{ postgres_version }}"
    restart_policy: always
    ports:
    - "0.0.0.0:5432:5432"
    env:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: "{{ postgres_root_password }}"
    volumes:
    - /opt/k3s-postgres/data:/var/lib/postgresql/data
    - /opt/k3s-postgres/init:/docker-entrypoint-initdb.d:ro

- name: Set up pgadmin4 container
  community.docker.docker_container:
    pull: true
    name: k3s-postgres-admin
    image: "{{ pgadmin_image }}:{{ pgadmin_version }}"
    restart_policy: always
    ports:
    - "127.0.0.1:5050:5050"
    env:
      PGADMIN_DEFAULT_EMAIL: "{{ pgadmin_default_email }}"
      PGADMIN_DEFAULT_PASSWORD: "{{ pgadmin_default_password }}"
      PGADMIN_LISTEN_PORT: "5050"
    links:
    - k3s-postgres:postgres
    volumes:
    - /opt/k3s-postgres-admin/conf/config_local.py:/pgadmin4/config_local.py
    - /opt/k3s-postgres-admin/conf/servers.json:/pgadmin4/servers.json
    - /opt/k3s-postgres-admin/data:/var/lib/pgadmin

- name: Write nginx-proxy-manager custom templates
  template:
    src: "{{ item.src }}"
    dest: "/opt/k3s-npm/custom/{{ item.dest }}"
    mode: 0644
  notify:
  - Restart nginx-proxy-manager
  loop:
  - src: nginx-proxy-manager/root.conf.j2
    dest: root.conf
  - src: nginx-proxy-manager/events.conf.j2
    dest: events.conf
  - src: nginx-proxy-manager/stream.conf.j2
    dest: stream.conf

- name: Set up nginx-proxy-manager container
  community.docker.docker_container:
    name: k3s-nginx-proxy-manager
    image: "{{ nginx_proxy_manager_image }}:{{ nginx_proxy_manager_version }}"
    restart_policy: always
    env:
      DB_SQLITE_FILE: "/data/database.sqlite"
    ports:
    - "0.0.0.0:80:80"
    - "0.0.0.0:81:81"
    - "0.0.0.0:443:443"
    - "0.0.0.0:6443:6443"
    volumes:
    - /opt/k3s-npm/database.sqlite:/data/database.sqlite
    - /opt/k3s-npm/custom:/data/nginx/custom


